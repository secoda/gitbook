{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from urllib.parse import quote\n",
    "from typing import List, Optional\n",
    "import json\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Secoda Set Up and Auth\n",
    "SECODA_BASE_URL = \"Add your Secoda Base URL here\"\n",
    "SECODA_API_KEY = \"Add your Secoda API key here\"\n",
    "\n",
    "secoda_session = requests.Session()\n",
    "secoda_session.headers.update(dict(\n",
    "    Authorization=f\"Bearer {SECODA_API_KEY}\",\n",
    "    Accept=\"application/json\"\n",
    "))\n",
    "\n",
    "def secoda_build_url(endpoint: str):\n",
    "    return f\"{SECODA_BASE_URL}{endpoint}\"\n",
    "\n",
    "# Healthcheck\n",
    "healthcheck = secoda_session.get(secoda_build_url(\"healthcheck\")).json()\n",
    "print(healthcheck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Operand:\n",
    "    def __init__(self, operator: str, field: str, value: str):\n",
    "        self.operator = operator\n",
    "        self.field = field\n",
    "        self.value = value\n",
    "\n",
    "    def to_dict(self):\n",
    "        return {\n",
    "            'operator': self.operator,\n",
    "            'field': self.field,\n",
    "            'value': self.value\n",
    "        }\n",
    "\n",
    "class CatalogFilter:\n",
    "    def __init__(self, operator: str, operands: List[Operand]):\n",
    "        self.operator = operator\n",
    "        self.operands = operands\n",
    "\n",
    "    def to_dict(self):\n",
    "        return {\n",
    "            'operator': self.operator,\n",
    "            'operands': [operand.to_dict() for operand in self.operands]\n",
    "        }\n",
    "\n",
    "class CatalogSort:\n",
    "    def __init__(self, field: str, order: str, tie_breaker: Optional['CatalogSort'] = None):\n",
    "        self.field = field\n",
    "        self.order = order\n",
    "        self.tie_breaker = tie_breaker\n",
    "\n",
    "    def to_dict(self):\n",
    "        return {\n",
    "            'field': self.field,\n",
    "            'order': self.order,\n",
    "            'tie_breaker': self.tie_breaker.to_dict() if self.tie_breaker else None\n",
    "        }\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def list_catalog_resources(team_id=None, filter_obj=None, sort_obj=None):\n",
    "    base_endpoint = \"resource/catalog/\"\n",
    "    query_params = []\n",
    "\n",
    "    # Process and add query parameters only if they are not None\n",
    "    if team_id is not None:\n",
    "        query_params.append(f\"teams={team_id}\")\n",
    "    if filter_obj is not None:\n",
    "        filter_obj = quote(filter_obj)\n",
    "        query_params.append(f\"filter={filter_obj}\")\n",
    "    if sort_obj is not None:\n",
    "        sort_obj = quote(sort_obj)\n",
    "        query_params.append(f\"sort={sort_obj}\")\n",
    "\n",
    "    all_results = []\n",
    "    if query_params:\n",
    "        url = secoda_build_url(f\"{base_endpoint}?\" + \"&\".join(query_params))\n",
    "    else:\n",
    "        url = secoda_build_url(base_endpoint)\n",
    "\n",
    "    while True:\n",
    "        response = secoda_session.get(url)\n",
    "\n",
    "        data = response.json()\n",
    "        all_results.extend(data['results'])\n",
    "\n",
    "        if not data['links']['next']:\n",
    "            break\n",
    "        else:\n",
    "            url = data['links']['next']\n",
    "    \n",
    "    return all_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# I'd like to filter my catalog resources for all tables, views, workbooks and dashboards that have customer in the title, sorted by externally updated timestamp.\n",
    "\n",
    "type_operand = Operand(\n",
    "    operator=\"in\",\n",
    "    field=\"native_type\",\n",
    "    value=[\"view\", \"table\", \"workbook\", \"dashboard\"]\n",
    ")\n",
    "\n",
    "title_operand = Operand(\n",
    "    operator=\"exact\",\n",
    "    field=\"title\",\n",
    "    value=\"customers\"\n",
    ")\n",
    "\n",
    "\n",
    "filter_obj = CatalogFilter(\n",
    "    operator=\"and\",\n",
    "    operands=[type_operand, title_operand]\n",
    ")\n",
    "\n",
    "sort_obj = CatalogSort(\n",
    "    field=\"externally_updated_at\",\n",
    "    order=\"desc\"\n",
    ")\n",
    "\n",
    "filter_json = json.dumps(filter_obj.to_dict())\n",
    "sort_json = json.dumps(sort_obj.to_dict())\n",
    "\n",
    "resources = list_catalog_resources(filter_obj=filter_json)\n",
    "print(resources)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
